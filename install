#!/usr/bin/env bash

set -o errexit
set -o nounset
set -o pipefail
set -o errtrace
(shopt -p inherit_errexit &>/dev/null) && shopt -s inherit_errexit

SCRIPT_DIR="$(cd -P -- "$(dirname -- "$0")" && pwd -P)"
readonly SCRIPT_DIR
readonly ONE_DIR="$SCRIPT_DIR"/..

# one.bash:usage
if [[ ${1:-} == -h ]] || [[ ${1:-} == --help ]]; then
  cat <<EOF
Usage: one $(basename "$0")
Desc: initialize all configs, plugins and bash.
EOF
  exit 0
fi

# shellcheck source=./others/ONE/deps/colors.bash
. "$ONE_DIR"/deps/colors.bash

# shellcheck source=./others/ONE/deps/lobash.bash
. "$ONE_DIR"/deps/lobash.bash

git_clone() {
  if [[ -d "$2" ]]; then return 0; fi
  git clone --depth 1 --single-branch "$1" "$2"
}

stderr() {
  echo "$@" >&2
}

throw_err() {
  echo "$1" >&2
  exit "${2:-10}"
}

check_cmd() {
  local cmd="$1"
  if l.has_not command "$cmd"; then throw_err "$cmd not found"; fi
}

check() {
  if ! ( $BASH --version | grep bash &>/dev/null ); then
    echo "\$BASH must be a bash. Current is $BASH. Use 'chsh' to change default shell."
    exit 11
  fi
  check_cmd gawk
  check_cmd perl
  check_cmd git
  check_cmd python3
  return 0
}

downloads=(
  git-forgit='https://raw.githubusercontent.com/wfxr/forgit/master/bin/git-forgit'
  trans='https://git.io/trans'
)

download_bins() {
  local name target
  for name in "${!downloads[@]}"; do
    target=~/bin/"$name"
    if [[ ! -f "$target" ]]; then
      curl -L -o "$target" "${downloads[$name]}"
      chmod +x "$target"
    fi
  done
}

main() {
  check

  # shellcheck source=./init.bash
  . "$SCRIPT_DIR"/../init.bash

  git submodule update --init --recursive

  cd "$ONE_DIR"/deps/ble.sh
  make -C "$ONE_DIR"/deps/ble.sh install INSDIR="$HOME/.local/share/blesh"
  cd "$ONE_DIR"

  download_bins

  # local system=$(l.)
  # system=$(l.choose macos debian debian-server)

  # # Clone submodules and initialize them
  # git -C "$ONE_DIR" submodule update --init --recursive
  #
  # # Make sure XDG_ variables set
  # . "$ONE_DIR"/bash/xdg.bash
  #
  # # You may check the content of `dotbot.conf.yaml` file,
  # # It creates soft-links based on dotbot.conf.yaml.
  # "$ONE_DIR"/dotbot "$ONE_DIR/dotbot.conf/$system.yaml"
  # # Checkout the output
  #
  # # shellcheck source=bash/bashrc
  # . "$HOME/.bashrc"
  #
  # # Enable recommend plugs
  # # shellcheck source=./bootstraps/recommended_plugs
  # . "$ONE_DIR"/bootstraps/recommended_plugs
  #
  # case $system in
  #   macos)
  #     a enable plugin macos gnutools-for-mac sed-for-mac
  #     ;;
  #   debian|debian-server)
  #     a enable plugin linux
  #     ;;
  # esac

  echo "Please restart your shell to take effect."
}

main "$@"
