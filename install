#!/usr/bin/env bash

set -o errexit
set -o nounset
set -o pipefail
set -o errtrace
(shopt -p inherit_errexit &>/dev/null) && shopt -s inherit_errexit

readonly SCRIPT_DIR="$(cd -P -- "$(dirname -- "$0")" && pwd -P)"
readonly SCRIPT_BASENAME="$(basename "$0")"

# shellcheck source=deps/colors.bash
. $SCRIPT_DIR/deps/colors.bash

# shellcheck source=deps/lobash.bash
. $SCRIPT_DIR/deps/lobash.bash

show_help() {
  cat <<EOF
${GREEN}Usage${RESET_ALL}: $SCRIPT_BASENAME <DOTFILE_DIR>

${CYAN}Description${RESET_ALL}:
Download dotfiles to <DOTFILE_DIR> and initialize all configs, plugins and bash.

${BLUE}Argument${RESET_ALL}:
DOTFILE_DIR        Main dotfile directory
EOF
}

install_java() {
    sudo ln -sfn /opt/homebrew/opt/openjdk/libexec/openjdk.jdk /Library/Java/JavaVirtualMachines/openjdk.jdk
}

check_support() {
}

bootstrap_MacOS() {
}

bootstrap_linux() {
  echo '[Bootstrap in linux]'
  echo '[Done] Bootstrap in linux'
}

set_curl_proxy() {
  export ALL_PROXY="socks5://127.0.0.1:7890"
}

install_golang() {
  local go_version=go1.17.4

  if l.has command go; then
    local cur_version=$(go version | awk '{print $3}')
    if [[ $cur_version == $go_version ]]; then
      echo "golang \"${go_version}\" installed"
      return
    else
      # continue
    fi
  else
    brew install go
    brew_install=true
  fi

  local GVM_SCRIPT=${HOME}/.gvm/scripts/gvm
  if [[ ! -f $GVM_SCRIPT ]]; then
    bash < <(curl -s -S -L https://raw.githubusercontent.com/moovweb/gvm/master/binscripts/gvm-installer)
  fi
  source "$GVM_SCRIPT"

  gvm install $go_version
  gvm use $go_version --default

  if [[ $brew_install == true ]]; then
    brew uninstall go
  fi
}

init() {
  DOTFILES_REPO=https://github.com/adoyle-h/dotfiles.git
}

main() {
  if [[ $# != 1 ]]; then
    printf '%b\n' "$(show_help)"
    exit 0
  fi

  check_support

  readonly DOTFILE_DIR=$1

  if [[ -e $DOTFILE_DIR ]]; then
    echo "Cannot download dotfiles on existed file: $DOTFILE_DIR" >&2
    exit 1
  fi

  # Clone this repo
  git clone --depth 1 "$DOTFILES_REPO" "$DOTFILE_DIR"

  # Clone submodules and initialize them
  git -C $DOTFILE_DIR submodule update --init --recursive

  # Make sure XDG_ variables set
  . $DOTFILE_DIR/bash/xdg.bash

  # You may check the content of `dotbot.conf.yaml` file,
  # It creates soft-links based on dotbot.conf.yaml.
  $DOTFILE_DIR/dotbot
  # Checkout the output

  # shellcheck source=bash/bashrc
  . "$HOME/.bashrc"

  # Enable recommend plugs
  . $DOTFILES_DIR/bootstraps/recommended_plugs

  echo "Last step: Please restart your shell. Enjoy yourself."
}

main "$@"
