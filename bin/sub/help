#!/usr/bin/env bash

set -o errexit
set -o nounset
set -o pipefail
set -o errtrace
(shopt -p inherit_errexit &>/dev/null) && shopt -s inherit_errexit

# Usage: $SUB_NAME help [sub-command]
# Summary: print help for sub-command

get_sub_command_path() {
  COMMAND_PATH="$SUB_BIN_DIR/$1"
  if [[ ! -x "$COMMAND_PATH" ]]; then
    echo "$SUB_NAME: No such command: $1" >&2
    echo "  - No executable file: $COMMAND_PATH" >&2
    exit 1
  fi
  echo "$COMMAND_PATH"
}

print_summaries() {
  local commands=()
  local summaries=()
  local longest_command=0
  local cmd file summary

  for cmd in $("$SUB_BIN_DIR"/commands); do
    file="$(get_sub_command_path "$cmd")"
    if [ ! -h "$file" ]; then
      summary="$(summary "$file")"
      if [ -n "$summary" ]; then
        commands["${#commands[@]}"]="$cmd"
        summaries["${#summaries[@]}"]="$summary"

        if [ "${#cmd}" -gt "$longest_command" ]; then
          longest_command="${#cmd}"
        fi
      fi
    fi
  done

  local index columns
  columns="$(tput cols)"
  local summary_length=$(( columns - longest_command - 5 ))

  for (( index=0; index < ${#commands[@]}; index++ )); do
    printf "   %-${longest_command}s  %s\\n" "${commands[$index]}" \
      "$(truncate "$summary_length" "${summaries[$index]}")"
  done
}

print_help() {
  local file="$1"
  local usage h summary
  usage="$(usage "$file")"

  if [ -n "$usage" ]; then
    echo "$usage"

    h="$(help "$file")"
    [[ -n "$h" ]] && printf '\n%s\n' "$h"

    summary="$(summary "$file")"
    [[ -n "$summary" ]] && echo && echo "Summary: $summary"
  else
    echo "Sorry, this command isn't documented yet."
  fi
}

summary() {
  sed -n -E 's/^# (Summary|Description): (.*)/\2/p' "$1"
}

usage() {
  sed -n -E 's/^# (Usage: .*)/\1/p' "$1" | envsubst
}

help() {
  awk '/^[^#]/{p=0} /^# Help:/{p=1} p' "$1" | sed "s/^# Help: //;s/^# //;s/^#//"
}

truncate() {
  local max_length="$1"
  local string="$2"

  if [[ "${#string}" -gt "$max_length" ]]; then
    local length=$(( max_length - 3 ))
    echo "${string:0:$length}..."
  else
    echo "$string"
  fi
}

main() {
  local cmd="${1:-}"

  case "$cmd" in
  "") cat <<EOF
Usage: $SUB_NAME <command> [<args>]

Some useful sub commands are:
$(print_summaries)

See '$SUB_NAME help <command>' for information on a specific command.
EOF
  ;;

  *)
    file="$(get_sub_command_path "$cmd")"

    if [ -n "$file" ]; then
      print_help "$file"
    fi
  esac
}

# Provide sub completions
if [ "${1:-}" = "--complete" ]; then
  # "$SUB_BIN_DIR"/commands
  $SUB_NAME commands
  exit
fi

main "$@"
