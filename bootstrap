#!/usr/bin/env bash
# Usage: ./bootstrap
# Description: To install dotfiles framework and system tools from bare system

set -o errexit
set -o nounset
set -o pipefail
(shopt -p inherit_errexit &>/dev/null) && shopt -s inherit_errexit

readonly SCRIPT_DIR="$(cd -P -- "$(dirname -- "$0")" && pwd -P)"
readonly TZ=${TZ:-Asia/Shanghai}
readonly DOTFILES_GIT_REPO=git@github.com:adoyle-h/dotfiles.git

source "$SCRIPT_DIR/bash/xdg.bash"
source "$SCRIPT_DIR/deps/lobash.bash"
source "$SCRIPT_DIR/check.bash"

install_java() {
    sudo ln -sfn /opt/homebrew/opt/openjdk/libexec/openjdk.jdk /Library/Java/JavaVirtualMachines/openjdk.jdk
}

bootstrap_MacOS() {
}

bootstrap_linux() {
  echo '[Bootstrap in linux]'
  echo '[Done] Bootstrap in linux'
}

install_golang() {
  local go_version=go1.17.4

  if l.has command go; then
    local cur_version=$(go version | awk '{print $3}')
    if [[ $cur_version == $go_version ]]; then
      echo "golang \"${go_version}\" installed"
      return
    else
      # continue
    fi
  else
    brew install go
    brew_install=true
  fi

  local GVM_SCRIPT=${HOME}/.gvm/scripts/gvm
  if [[ ! -f $GVM_SCRIPT ]]; then
    bash < <(curl -s -S -L https://raw.githubusercontent.com/moovweb/gvm/master/binscripts/gvm-installer)
  fi
  source "$GVM_SCRIPT"

  gvm install $go_version
  gvm use $go_version --default

  if [[ $brew_install == true ]]; then
    brew uninstall go
  fi
}

check_uninstalled_cmd() {
  local cmd=$1
  if l.has_not command "$cmd" ; then
    echo "command [$cmd] is not installed. ❌"
    return 0
  else
    echo "command [$cmd] is installed. ✅"
    return 1
  fi
}

_install_build_essential() {
  echo "[_install_build_essential_${SYSTEM}]"
  _install_build_essential_${SYSTEM}

  if has not command curl ; then
    echo 'To install curl'
    _install_curl
  fi

  if has not command rvm ; then
    echo 'To install rvm and ruby'
    _install_rvm
  fi

  if has not command python ; then
    echo 'To install python'
    _install__python_${SYSTEM}
  fi

  # special command nvm
  if command -v nvm != 'nvm' ; then
    echo 'To install nvm and node'
  fi
}

_install_git_Macos() {
  brew install git
}

_install_rvm() {
  gpg --keyserver hkp://keys.gnupg.net --recv-keys 409B6B1796C275462A1703113804BB82D39DC0E3
  curl -sSL https://get.rvm.io | bash -s stable --ruby

  rvm install 2 --verify-downloads
  rvm --default use 2
}

_install_nvm() {
  export NVM_DIR="$HOME/.nvm"
  git clone --depth 1 -b v0.37.2 https://github.com/creationix/nvm.git "$NVM_DIR"
  . "$NVM_DIR/nvm.sh"

  nvm install 12
  npm alias default 12
  nvm use --delete-prefix default
}

ensure_dirs() {
  local dirnames=(
    Documents
    Downloads
    Movies
    Pictures
    Music
    Workspace
    Presentations
    Design
    .config
    .cache
    temp
    src
    others
  )

  cd "$HOME"
  mkdir -p "${dirnames[@]}"
  cd -
}

bootstrap_common() {
  echo "[Bootstrap common settings]"

  echo 'To mkdir -p general work directories'
  mkdir -p ~/.sshrc.d
  _install_build_essential

  _install_ruby
  _install_python
  _install_node

  if [[ ! -d ~/dotfiles ]] ; then
    echo 'To download my dotfiles'
    git clone "$DOTFILES_GIT_REPO" ~/dotfiles
    git -C "$DOTFILES_GIT_REPO" submodule update --init
    git -C "$DOTFILES_GIT_REPO"/deps/dotbot submodule update --init
    # ~/dotfiles/install
  fi

  if command -v nvm != 'nvm' ; then
    echo 'To install nvm'
    curl -o- https://raw.githubusercontent.com/creationix/nvm/v0.34.0/install.sh | bash

    local answer=$(l.ask_input "To install NodeJS. Which version? (Defaults to node latest)")
    if [[ -z $answer ]]; then
      answer=node
    fi

    echo "To install node. nvm install $answer"
    nvm install $answer
  fi

  if l.ask 'To install taskbook'; then
    npm i -g taskbook
  else
    cat <<<EOF
      You can install taskbook in manually by "npm i -g taskbook"
    EOF
  fi

  if [[ ! -d ~/dotfiles/secrets ]] ; then
    echo 'To download my secrets'
    # git clone --depth 1  ~/dotfiles/secrets
  fi

  if check_uninstalled_cmd cheat ; then
    if l.ask 'To download my cheatsheet'; then
      echo 'To install cheat'
      pip install --user cheat
    fi
  fi

  if [[ ! -d ~/dotfiles/cheat ]] ; then
    if l.ask 'To download my cheatsheet'; then
      git clone --depth 1 git@github.com:adoyle-h/my-command-cheat.git ~/dotfiles/cheat
    fi
  fi

  if [[ ! -d ~/dotfiles/nvim ]] ; then
    if l.ask 'To install nvim'; then
      echo 'To download my nvim configuration'
      git clone --depth 1 git@github.com:adoyle-h/neovim-config.git ~/dotfiles/nvim
    fi
  fi

  if check_uninstalled_cmd fzf ; then
    if l.ask 'To install fzf'; then
      git clone --depth 1 https://github.com/junegunn/fzf.git ~/.fzf
      ~/.fzf/install
    else
      cat <<<EOF
        You can install fzf in manually by below commands.
        """
        git clone --depth 1 https://github.com/junegunn/fzf.git ~/.fzf
        ~/.fzf/install
        """
      EOF
    fi
  fi

  if check_uninstalled_cmd grip ; then
    if l.ask 'To install grip'; then
      pip install grip
    fi
  fi

  ./dotbot

  # Restart your shell

  echo '[Done] Bootstrap in common'
}

bootstrap() {
  return 0
}

main() {
  check_support

  if l.is_ubuntu; then
    # shellcheck source=bootstraps/ubuntu.bash
    . "$SCRIPT_DIR"/bootstraps/ubuntu.bash
  fi

  bootstrap
  bootstrap_common

  # @TODO clone my secret folders
}

main "$@"
